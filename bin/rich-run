#!/usr/bin/env node

const { program } = require('commander');
const shell = require('shelljs');
const chalk = require('chalk');
const { readFile, askQuestions } = require('../lib/utils.js');

program
  .name('rich')
  .usage('run <option>')
  .on('--help', () => {
    console.log()
    console.log(chalk.gray('    # run the script in the package.json of the current project'))
    console.log('    $ rich run dev')
    console.log()
  })
  .option('-s', '--save')
  .option('--env <env>')
  .option('--module <module>')
  .on('exit', () => {
    console.log()
  })
  .parse(process.argv)

function help() {
  if (program.args.length < 1) return program.help()
}

help()
const options = program.opts()
const optionsStr = Object.entries(options).reduce((options, [key, val]) => options += `--${key}=${val} `, ' ')

const COMMAND_TYPE = program.args[0]; // 执行的command
async function run() {
  let config = await readFile(`${process.cwd()}/script.json`);
  config = config ? JSON.parse(config) : {};
 
  if (Object.keys(config.scripts).includes(COMMAND_TYPE)) {
    const scripts = config.scripts[COMMAND_TYPE]
    let index = -1, answer = {}
    while(++index < scripts.length) {
      const script = scripts[index]
      if (typeof script === 'object') {
        answer[index] = (await askQuestions([{
          name: 'option',
          ...script
        }])).option 
      }
    }
  
    let shellCommand = config.scripts[COMMAND_TYPE]
      .reduce((command, keyword, index) => command += ` ${answer[index] ?? keyword}`, '')
      console.log(shellCommand + optionsStr)
      shell.exec(shellCommand + optionsStr)
  }
}
run()