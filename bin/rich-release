#!/usr/bin/env node

const { program } = require('commander')
const chalk = require('chalk')
const { command, hasLocalChanged, gitBranchIs, askQuestions, readPackagejson, oraPromise } = require('../lib/utils')
const { version } = require('../lib/questions')
const path = require('path')
const { success, warn } = require('../lib/log.js')
program
  .name('rich')
  .usage('release [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]')
  .option('--preid')
  .on('--help', () => {
    console.log('  Examples:')
    console.log(chalk.gray('    Pattern: major.minor.patch'))
    console.log('')
    console.log(chalk.gray('    # update the specified version'))
    console.log('    $ rich release 0.0.1')
    console.log('    // v0.0.1')
    console.log()
    console.log(chalk.gray('    # update the patch version'))
    console.log('    $ rich release patch')
    console.log('    // v0.0.2')
    console.log()
    console.log(chalk.gray('    # update the minor version'))
    console.log('    $ rich release minor')
    console.log('    // v0.1.0')
    console.log()
    console.log(chalk.gray('    # update the major version'))
    console.log('    $ rich release major')
    console.log('    // v1.0.0')
    console.log()
    console.log(chalk.gray('    # update the premajor version'))
    console.log('    $ rich release premajor')
    console.log('    // v2.0.0-0')
    console.log()
    console.log(chalk.gray('    # update the preminor version'))
    console.log('    $ rich release preminor')
    console.log('    // v2.1.0-0')
    console.log()
    console.log(chalk.gray('    # update the prepatch version'))
    console.log('    $ rich release prepatch')
    console.log('    // v2.1.1-0')
    console.log()
    console.log(chalk.gray('    # update version from git latest tag')) // 读取git最新标签用作新的npm版本
    console.log('    $ rich release from-git')
    console.log('    // v2.1.1-1')
    console.log()
    console.log(chalk.gray('    # use as a prefix for the prerelease'))
    console.log('    $ rich release prerelease --preid=alpha')
    console.log('    // v2.1.1-alpha.0')
    console.log()
    
  })
  .parse(process.argv)
  .on('exit', console.log)

/**
 * @description 通过命令行参数形式升级版本
 * @returns { string } 合并的命令后缀
 */
function updateByParams () {
  return program.args.reduce((t, k) => t+= ` ${k}`, '')
}

/**
 * @description 通过命令行交互形式升级版本
 * @returns { string }
 */
async function updateByInquirer () {
  const ans = await askQuestions([version])
  return ans.option
}

/**
 * @description 是否通过命令行参数形式表示指定版本
 * @returns { boolean }
 */
function isManual () {
  return program.args.length > 0
}

/**
 * @description 退出
 */
function exit () {
  process.exit(0)
}

/**
 * @description 当前项目升级版本号
 * @returns 
 */
async function generateLocalVersion () {
  let newVersion = '';
  // 有本地修改则退出
  if (await hasLocalChanged()) {
    warn('There are uncommitted codes')
    exit()
  }

  let options = isManual() ? updateByParams() : await updateByInquirer();
  try {
    newVersion = await oraPromise(command.bind(null, `npm version ${options} --allow-same-version`),  { text: 'upgrade current item' })
    newVersion = newVersion.replace('v', '');
  } catch (err) {
    console.error(err)
    exit()
  }
  return newVersion
}

/**
 * @description 关联项目命令
 * @param path 关联项目地址
 * @returns 
 */
function exec (path) {
  return (script) => command(script, { cwd: path })
}

/**
 * @description 同步关联项目版本号
 * @param version 同步的版本号
 */
async function generateRelatedVersion (version, dir) {
  const absolutePath = path.resolve(process.cwd(), '../' + dir)
  const cmd = exec(absolutePath)
  // 如果本地有文件修改，则暂存本地
  if (await hasLocalChanged()) {
    await cmd(`git stash save 'saved by version:${version}'`)
  }
  // 切换到master分支
  if (!await gitBranchIs('master', { cwd:  absolutePath })) {
    await cmd('git switch master')
  }
  await cmd(`npm version ${version} --allow-same-version`) || '';
}

async function main () {
  const newVersion = await generateLocalVersion();
  let items = readPackagejson().relatedItems; // 关联的项目路径, 可以是
  if (items) {
    items = Array.isArray(items) ? items : [items]
    await Promise.all(items.map(dir => oraPromise(
      generateRelatedVersion.bind(null, newVersion, dir), 
      { text: `upgrade ${dir}`}
    )))
  }
  success(`version upgrade to ${newVersion}`)
}

main()



