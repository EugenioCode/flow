#!/usr/bin/env node

const { program } = require('commander')
const path = require('path')
const chalk = require('chalk')
const { 
  command, 
  hasLocalChanged, 
  gitBranchIs, 
  askQuestions, 
  readPackagejson, 
  oraPromise, 
  isRemoteBranch 
} = require('../lib/utils')
const { version, commitPush } = require('../lib/questions')
const Logger = require('../lib/log.js')
const service = require('../lib/service.js')

program
  .name('rich')
  .usage('release [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]')
  .option('--preid')
  .on('--help', () => {
    console.log('  例如:')
    console.log(chalk.gray('    规则: [major].[minor].[patch]'))
    console.log('')
    console.log(chalk.gray('    # 升级至指定版本'))
    console.log('    $ rich release 0.0.1')
    console.log('    // v0.0.1')
    console.log()
    console.log(chalk.gray('    # 升级修订版本'))
    console.log('    $ rich release patch')
    console.log('    // v0.0.2')
    console.log()
    console.log(chalk.gray('    # 升级次版本'))
    console.log('    $ rich release minor')
    console.log('    // v0.1.0')
    console.log()
    console.log(chalk.gray('    # 升级主版本'))
    console.log('    $ rich release major')
    console.log('    // v1.0.0')
    console.log()
    console.log(chalk.gray('    # 升级 premajor version'))
    console.log('    $ rich release premajor')
    console.log('    // v2.0.0-0')
    console.log()
    console.log(chalk.gray('    # 升级 preminor version'))
    console.log('    $ rich release preminor')
    console.log('    // v2.1.0-0')
    console.log()
    console.log(chalk.gray('    # 升级 prepatch version'))
    console.log('    $ rich release prepatch')
    console.log('    // v2.1.1-0')
    console.log()
    console.log(chalk.gray('    # 根据git最新的tag版本升级')) // 读取git最新标签用作新的npm版本
    console.log('    $ rich release from-git')
    console.log('    // v2.1.1-1')
    console.log()
    console.log(chalk.gray('    # 用作预发布的前缀'))
    console.log('    $ rich release prerelease --preid=alpha')
    console.log('    // v2.1.1-alpha.0')
    console.log()
    
  })
  .parse(process.argv)
  .on('exit', console.log)

/**
 * @description 通过命令行参数形式升级版本
 * @returns { string } 合并的命令后缀
 */
function updateByParams () {
  return program.args.reduce((t, k) => t+= ` ${k}`, '')
}

/**
 * @description 通过命令行交互形式升级版本
 * @returns { string } 'feat' |'fix' | 'style' ……
 */
async function updateByInquirer () {
  const ans = await askQuestions([version]) || {}
  return ans.option?.replace?.(/:.+/, '')
}

/**
 * @description 是否通过命令行参数形式手动指定版本
 * @returns { boolean } 
 */
function isManualSetVerion () {
  return program.args.length > 0
}

/**
 * @description 退出
 */
function exit () {
  process.exit(0)
}

/**
 * @description 在其它项目路径执行命令
 * @param path 关联项目地址
 * @returns { Function }
 */
function exec (path) {
  return (script) => command(script, { cwd: path })
}


/**
 * @description 同步关联项目版本号
 * @param { version: string } 同步的版本号
 * @param { dir: string } 项目路径
 */
async function generateRelatedVersion (version, dir) {
  const absolutePath = path.resolve(process.cwd(), '../' + dir)
  const cmd = exec(absolutePath)
  // 如果本地有文件修改，则暂存本地
  if (await hasLocalChanged()) {
    await cmd(`git stash save 'saved by version:${version}'`)
  }
  await cmd(`npm version ${version} --allow-same-version`) || '';
}

/**
 * @description 获取相关项目的路径
 * @returns { Array }
 */
function getRelatedItems () {
  let relatedItems = readPackagejson().relatedItems;      // 关联的项目路径
  if (relatedItems) {
    relatedItems = Array.isArray(relatedItems) ? relatedItems : [relatedItems]
  }
  return relatedItems
}

/**
 * @description 升级配置的相关项目
 * @param { newVersion: string } 新版本号
 */
async function upgradeRelatedItems (newVersion) {
  let relatedItems = getRelatedItems()
  if (relatedItems) {
    await Promise.all(relatedItems.map(dir => {
      return oraPromise(generateRelatedVersion.bind(null, newVersion, dir), { text: `升级 ${dir}` })}
    ))
  }
}

/**
 * @description 推送远程仓库
 */
async function pushRemoteRepository () {
  const { push } = await askQuestions(commitPush); 
  const currentBranch = await gitBranchIs()
  const isRemote = await isRemoteBranch(currentBranch)
  if (push) {
    await oraPromise(() => command(`git push ${isRemote ? '' : `-u`} origin ${currentBranch}`), { text: '推送远程' })
  }
}

/**
 * @description 获取npm version的参数
 * @returns { string }
 */
async function getVersionCommandOptions () {
  return isManualSetVerion() ? updateByParams() : await updateByInquirer();
}

async function main () {
  let newVersion = '';
  await service.uncommittedCode();
  const options = await getVersionCommandOptions();

  try {
    newVersion = await oraPromise(command.bind(null, `npm version ${options} --allow-same-version`),  { text: '升级当前项目' })
    newVersion = newVersion.replace('v', '');
  } catch (err) {
    console.error(err)
    exit()
  }

  await upgradeRelatedItems(newVersion)
  await pushRemoteRepository()
  Logger.success(`项目版本升级至 ${newVersion}`)
}

main()



