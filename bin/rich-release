#!/usr/bin/env node

const { program } = require('commander')
const chalk = require('chalk')
const { command, hasLocalChanged, gitBranchIs } = require('../lib/utils')
const inquirer = require('inquirer')
const { version } = require('../lib/questions')
program
  .name('rich')
  .usage('release [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]')
  .option('--preid')
  .on('--help', () => {
    console.log('  Examples:')
    console.log(chalk.gray('    Pattern: major.minor.patch'))
    console.log('')
    console.log(chalk.gray('    # update the specified version'))
    console.log('    $ rich release 0.0.1')
    console.log('    // v0.0.1')
    console.log()
    console.log(chalk.gray('    # update the patch version'))
    console.log('    $ rich release patch')
    console.log('    // v0.0.2')
    console.log()
    console.log(chalk.gray('    # update the minor version'))
    console.log('    $ rich release minor')
    console.log('    // v0.1.0')
    console.log()
    console.log(chalk.gray('    # update the major version'))
    console.log('    $ rich release major')
    console.log('    // v1.0.0')
    console.log()
    console.log(chalk.gray('    # update the premajor version'))
    console.log('    $ rich release premajor')
    console.log('    // v2.0.0-0')
    console.log()
    console.log(chalk.gray('    # update the preminor version'))
    console.log('    $ rich release preminor')
    console.log('    // v2.1.0-0')
    console.log()
    console.log(chalk.gray('    # update the prepatch version'))
    console.log('    $ rich release prepatch')
    console.log('    // v2.1.1-0')
    console.log()
    console.log(chalk.gray('    # update version from git latest tag')) // 读取git最新标签用作新的npm版本
    console.log('    $ rich release from-git')
    console.log('    // v2.1.1-1')
    console.log()
    console.log(chalk.gray('    # use as a prefix for the prerelease'))
    console.log('    $ rich release prerelease --preid=alpha')
    console.log('    // v2.1.1-alpha.0')
    console.log()
    
  })
  .on('exit', console.log)

let options = process.argv.slice(2).reduce((t, k) => t+= ` ${k}`, '')

async function main () {
  let v = ''
  if (await hasLocalChanged()) {
    console.log(chalk.yellow('[Waring]: There are uncommitted codes'))
    return
  }
  // 如果没有指定版本，弹出交互命令
  if (process.argv.length < 3) {
    const asw1 = await inquirer.prompt([version])
    options = asw1.option
  }

  const isMaster = await gitBranchIs('master')

  // 只有master分支打tag
  if (!isMaster) {
    options += ' --no-git-tag-version'
  }

  try {
    v = await command(`npm version ${options}`) || ''
  } catch (e) {
    process.exit()
  }
  // 加上--no-git-tag-version后不打tag，也不会自动commit
  if (!isMaster) {
    await command('git add .')
    await command(`git commit -m ${v.replace('v', '')}`) // 要和自动提交内容一致，不含v，eg(0.0.14)
  }

  await command('git push')
}

main()




