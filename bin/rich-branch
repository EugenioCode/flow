#!/usr/bin/env node
const { program } = require('commander');
const chalk = require('chalk');
const { branchType } = require('../lib/questions')
const { 
  command, 
  askQuestions, 
  hasLocalChanged, 
  oraPromise, 
  gitBranchIs, 
  isRemoteBranch, 
  exec 
} = require('../lib/utils.js')

program
  .name('rich')
  .usage('branch <branch-name>')
  .option('-d, --delete',  'delete branch')
  .option('-b, --branch',  'create branch and switch')
  .option('-desc, --description', 'create branch description')
  .option('-s, --search',  'search branch')
  .on('--help', () => {
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # create git\'s new branch'))
    console.log('    $ rich branch -b f1')
    console.log()
    console.log(chalk.gray('    # create git\'s new branch and description'))
    console.log('    $ rich branch -b f1 -desc "hello world"')
    console.log()
    console.log(chalk.gray('    # search git\'s branch'))
    console.log('    $ rich branch -s f1')
    console.log()
    console.log(chalk.gray('    # update git\'s branch description'))
    console.log('    $ rich branch -s f1 -desc "new description"')
    console.log()
    console.log(chalk.gray('    # delete git\'s branch'))
    console.log('    $ rich branch -d f1')
    console.log()
  })
  .on('exit', console.log)
  .parse(process.argv)

const options = program.opts();  // 定义的option

let branchName = program.args[0]; // 分支名称
let description = program.args[1]

/**
 * @description 创建新分支
 * @param { branchName: string } 分支名称
 */
async function createBranch (branchName) {
  const answer = await askQuestions([branchType]);
  let newBranchName = `${answer.type}/${branchName}`;
  let stack = [command(`git checkout ${options.branch ? '-b' : ''} ${newBranchName}`)]
  if (options.description) { // 如果用户执行
    stack.push(setBranchDescription(newBranchName, description))
  }
  return Promise.all(stack).then(() => newBranchName).catch(() => { throw newBranchName });
}

/**
 * @description 删除分支
 * @param { branchName: string } 分支名称
 */
async function deleteBranch () {
  const str = program.args.reduce((str, name, index) => str += `${index > 0 ? '|' : ''}${name}`, '')
  return command(`git branch | grep -E '${str}' | xargs git branch -D`)
    .catch(() => {
      console.log(chalk.red(`Failed to delete. There is no branch named '${str}'`))
    })
}

/**
 * @description 为分支设置备注
 * @param {string} branchName 分支名称
 * @param {string} description 备注
 * @returns 
 */
function setBranchDescription (branchName, description) {
  return command(`git config branch.${branchName}.description "${description}"`)
}

/**
 * @description 通过分支名获取备注
 * @param {string} 分支名
 */
async function getDescriptionByBranch (branchName, isCurrentBranch) {
  const description = await command(`git config branch.${branchName}.description`).catch(() => '')
  branchName = isCurrentBranch ? `* ${branchName}` : branchName
  return description ? `${branchName}: ${description}` : branchName
}

/**
 * @description 暂存本地修改
 */
async function stashCode () {
  // 本地是否有修改，如果有则暂存
  if (await hasLocalChanged()) {
    console.log(chalk.green('本地有修改但未提交的文件, 已为你进行本地暂存'))
    await oraPromise(async () => {
      await command('rm -rf .git/index.lock')
      await command('git add .')
      await command(`git stash push -m "rich-flow stash your code at ${new Date().toLocaleString()}"`)
    }, {text: '暂存代码'})
  }
}

function delCurrentBranchPrefix (branchName) {
  return branchName.replace(/\*\s/, '')
}

/**
 * @description 打印分支信息
 * @param branchNames 分支列表
 */
function print (branchNames) {
  branchNames.forEach(t => { 
    if (t.indexOf('*') !== -1) {
      console.log(chalk.green(t))
    } else {
      console.log(`  ${t}`)
    }
  })
}

/**
 * @description 将命令返回的字符串转为数组
 * @param { string } str 命令返回的字符串 
 * @returns { Object } {[branchName]: isCurrentBranch} branchName 分支名，isCurrentBranch 是否是当前分支
 */
function getBranchNamesFromCommand (str) {
  const branches = str.trim().split(/(?:\n|$)(?:\s)*/)
  return branches.reduce((obj, rowName) => {
    let isCurrentBranch = false
    let branchName = rowName
    if (rowName.includes('*')) {
      branchName = /(?!(\*|\s)).+/.exec(rowName)[0]
      isCurrentBranch = true
    } 
    obj[branchName] = isCurrentBranch
    return obj
  }, {})
}

/**
 * @description 根据关键词查询信息信息，并携带分支的description
 * @param { string } keyword 分支关键词
 * @param { boolean } withDescription 是否需要分支描述
 * @returns 
 */
function searchWithDescription (keyword = '', withDescription = false) {
  return exec(`git branch | grep '${keyword}'`)
    .then(async res => {
      const branchMap = getBranchNamesFromCommand(res.stdout)
      const branchNames = Object.keys(branchMap)
      if (branchNames.length === 1 && withDescription) {
        await setBranchDescription(delCurrentBranchPrefix(branchNames[0]), description)
      }
      const stack = branchNames.reduce((list, name) => list.concat(getDescriptionByBranch(name, branchMap[name])), [])
      const branchesWithDescription = await Promise.all(stack)
      print(branchesWithDescription)
    }).catch(() => {
      console.log(chalk.red('Unmatched'))
    })
}

/**
 * @description 删除分支
 * @param branchName 分支名称
 * @returns 
 */
async function onDelete (branchName) {
  if (!options.delete) return 'next';
  await stashCode(); // 贮藏本地修改
  return deleteBranch(branchName)
}

/**
 * @description 创建分支
 * @param branchName 分支名称
 * @returns 
 */
 function onCreate (branchName) {
  if (!options.branch) return 'next';
  return createBranch(branchName)
    .then((newBranchName) => {
      console.log(`A branch named '${chalk.green(newBranchName)}' has been created for you`)
    })
    .catch((newBranchName) => {
      console.log(chalk.red(`Failed to create. A branch named '${newBranchName}' already exists`))
    })
}

/**
 * @description 分支模糊搜索
 * @param keyword 分支关键字
 * @returns 
 * 
 * example: git branch -s 'feat'
 */
function onSearch (keyword='') {
  if (!options.search) return 'next'
  return searchWithDescription(keyword, options.description)
}

/**
 * @description 查询本地分支信息
 * @returns Promise
 * 
 * example: git branch
 */
function onBranch () {
  return searchWithDescription('', true)
}

/**
 * @description 分支操作责任链链
 * @param branchName 分支名称
 * @param handlers 
 */
async function chain (branchName, handlers) {
  let index = -1
  while(++index < handlers.length) {
    if (await handlers[index](branchName) !== 'next') {
      break
    }
  }
}

async function main () {
  await chain(branchName, [onDelete, onSearch, onCreate, onBranch])
}

main()