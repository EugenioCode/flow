#!/usr/bin/env node
const { program } = require('commander');
const chalk = require('chalk');
const { branchType } = require('../lib/questions')
const { 
  command, 
  askQuestions, 
  hasLocalChanged, 
  oraPromise, 
  gitBranchIs, 
  isRemoteBranch, 
  exec 
} = require('../lib/utils.js')

program
  .name('rich')
  .usage('branch <branch-name>')
  .option('-d, --delete',  'delete branch')
  .option('-b, --branch',  'create branch and switch')
  .option('-s, --search',  'search branch')
  .on('--help', () => {
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # create git\'s new branch'))
    console.log('    $ rich branch f1')
    console.log()
    console.log(chalk.gray('    # search git\'s branch'))
    console.log('    $ rich branch -s feat')
    console.log()
    console.log(chalk.gray('    # delete git\'s branch'))
    console.log('    $ rich branch -d f1')
    console.log()
  })
  .on('exit', console.log)
  .parse(process.argv)

function help () {
  if (program.args.length < 1) return program.help()
}

help()



const options = program.opts();  // 定义的option

let branchName = program.args[0]; // 分支名称

/**
 * @description 创建新分支
 * @param { branchName: string } 分支名称
 */
async function createBranch (branchName) {
  const answer = await askQuestions([branchType])
  let newBranchName = `${answer.type}/${branchName}`
  let promise = options.branch ? command(`git checkout -b ${newBranchName}`) : command(`git branch ${newBranchName}`)
  return promise.then(() => newBranchName).catch(() => { throw newBranchName })
}

/**
 * @description 删除分支
 * @param { branchName: string } 分支名称
 */
async function deleteBranch (branchName) {
  const answer = await askQuestions([branchType])
  let newBranchName = `${answer.type}/${branchName}`
  return command(`git branch -D ${newBranchName}`)
    .catch(() => {
      console.log(chalk.red(`Failed to delete. There is no branch named '${newBranchName}'`))
    })
}

/**
 * @description 暂存本地修改
 */
async function stashCode () {
  // 本地是否有修改，如果有则暂存
  if (await hasLocalChanged()) {
    console.log(chalk.green('本地有修改但未提交的文件, 已为你进行本地暂存'))
    await oraPromise(async () => {
      await command('rm -rf .git/index.lock')
      await command('git add .')
      await command(`git stash push -m "rich-flow stash your code at ${new Date().toLocaleString()}"`)
    }, {text: '暂存代码'})
  }
}

/**
 * @description 拉取最新代码
 */
async function pullCode () {
  const currentBranchName = await gitBranchIs()
  if (await isRemoteBranch(currentBranchName)) {
    await command('git pull')
  }
}

/**
 * @description 删除分支
 * @param branchName 分支名称
 * @returns 
 */
async function onDelete (branchName) {
  await stashCode()
  await pullCode()
  if (!options.delete) return 'next'
  return deleteBranch(branchName)
}

/**
 * @description 创建分支
 * @param branchName 分支名称
 * @returns 
 */
 function onCreate (branchName) {
  return createBranch(branchName)
    .then((newBranchName) => {
      console.log(`A branch named '${chalk.green(newBranchName)}' has been created for you`)
    })
    .catch((newBranchName) => {
      console.log(chalk.red(`Failed to create. A branch named '${newBranchName}' already exists`))
    })
}

/**
 * @description 分支模糊搜索
 * @param keyword 分支关键字
 * @returns 
 */
function onSearch (keyword) {
  if (!options.search) return 'next'
  return exec(`git branch | grep ${keyword}`)
    .then(res => {
      console.log(chalk.green(res.stdout))
    }).catch(() => {
      console.log(chalk.red('Unmatched'))
    })
}


/**
 * @description 分支操作责任链链
 * @param branchName 分支名称
 * @param handlers 
 */
async function chain (branchName, handlers) {
  let index = -1
  while(++index < handlers.length) {
    if (await handlers[index](branchName) !== 'next') {
      break
    }
  }
}

async function main () {
  await chain(branchName, [onDelete, onSearch, onCreate])
}

main()