#!/usr/bin/env node

const { program } = require('commander');
const { gitBranchIs, hasLocalChanged, command, oraPromise, queryLocalBranches, queryRemoteBranches } = require('../lib/utils.js')
const chalk = require('chalk')


program
  .name('rich')
  .usage('renew <branch> [otherBranch...]')
  .description('recreate local branch')
  .parse(process.argv)
  .on('--help', () => {
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # recreate local branch from remote master'))
    console.log('    $ rich new dev sit pre')
    console.log()
    console.log()
  })
  .on('exit', console.log)

function help () {
  // 通过program.parse(arguments)方法处理参数，没有被使用的选项会存放在program.args数组中
  if (program.args.length < 1) return program.help()
}

help()

let branches = program.args || []

const createBranch = async (branchName) => {
  await command(`git branch ${branchName} && git push origin -u ${branchName}`)
}

/**
 * @description 取交集
 * @param l1 数组1
 * @param l2 数组2
 * @returns 
 */
function mixed (l1,l2) {
  return l1.filter(t => l2.includes(t))
}

async function run() {
  const localBranchList = await queryLocalBranches()
  const remoteBranchList = await queryRemoteBranches()
  // 本地是否有修改，如果有则暂存
  if (await hasLocalChanged()) {
    console.log(chalk.green('Files that have been modified but not submitted locally have been staged locally for you'))
    await oraPromise(async () => {
      await command('rm -rf .git/index.lock')
      await command('git add .')
      await command(`git stash push -m "rich-flow stash your code at ${new Date().toLocaleString()}"`)
    }, {text: 'Stash code'})
  }
  const isMasterBranch = await gitBranchIs('master')
  if (isMasterBranch) {
    await command('git pull')
    // 删除本地分支
    await oraPromise(() => Promise.all(mixed(localBranchList, branches).map(name => command(`git branch -D ${name}`))), {text: 'Delete local branch'})
    // 删除远程分支
    await oraPromise(() => Promise.all(mixed(remoteBranchList, branches).map(name => command(`git push origin -d ${name}`))), {text: 'Delete remote branch'})
    // 创建本地和远程分支
    await oraPromise(() => Promise.all(branches.map(createBranch)), {text: 'Create branch'})
  } else {
    await command('git switch master')
    run()
  }
}

run()