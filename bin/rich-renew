#!/usr/bin/env node

const shell = require('shelljs');
const { program } = require('commander');
const { gitBranchIs, hasLocalChanged, command, oraPromise } = require('../lib/utils.js')
const chalk = require('chalk')


program
  .name('rich')
  .usage('renew <branch> [otherBranch...]')
  .description('recreate local branch')
  .parse(process.argv)
  .on('--help', () => {
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # recreate local branch from remote master'))
    console.log('    $ rich new dev sit pre')
    console.log()
    console.log()
  })
  .on('exit', console.log)

function help () {
  // 通过program.parse(arguments)方法处理参数，没有被使用的选项会存放在program.args数组中
  if (program.args.length < 1) return program.help()
}

help()

let branches = program.args || []

const updateBranch = (branchName) => {
  shell.exec(`git branch -D ${branchName} && git push origin -d ${branchName}`)
  shell.exec(`git branch ${branchName} && git push origin -u ${branchName}`)
}

const updateCode = () => {
  shell.exec('git pull')
}

const switchBranch = (branchName) => {
  shell.exec(`git switch ${branchName}`)
}

async function run() {
  // 本地是否有修改，如果有则暂存
  if (await hasLocalChanged()) {
    console.log(chalk.green('本地有修改但未提交的文件, 已为你进行本地暂存'))
    await oraPromise(async () => {
      await command('rm -rf .git/index.lock')
      await command('git add .')
      await command(`git stash push -m "rich-flow stash your code at ${new Date().toLocaleString()}"`)
    }, {text: '暂存代码'})
  }
  const isMasterBranch = await gitBranchIs('master')
  if (isMasterBranch) {
    updateCode()
    branches.forEach(updateBranch)
  } else {
    switchBranch('master')
    run()
  }
}

run()