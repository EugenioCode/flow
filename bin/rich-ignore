#!/usr/bin/env node
const { program } = require('commander');
const { command, stat, readFile, writeFile, oraPromise } = require('../lib/utils');
const Logger = require('../lib/log');
const chalk = require('chalk');
const path = require('path');
const keys = require('../lib/keys');

program
  .name('rich')
  .usage('ignore <filename>')
  .on('--help', () => {
    console.log('  例如:')
    console.log()
    console.log(chalk.gray('    # 忽略指定文件'))
    console.log('    $ rich ignore .DS_Store')
    console.log()
  })
  .on('exit', console.log)
  .parse(process.argv)

function help () {
  if (process.argv.length < 1 ) return program.help();
}

help()

const fileName = process.argv[2]; // 需要忽略的文件或路径

/**
 * @description .gitignore 文件追加忽略的文件
 */
async function fileIgnore () {
  const rootPath = path.resolve(process.cwd(), '.gitignore')
  let fileGlob = `${fileName}`
  if (await stat('.gitignore')) {               // 有.gitignore文件
    const content = await readFile(rootPath)
    if (content.indexOf(fileGlob) === -1) {     // fileGlob 是否已存在
      fileGlob = content + keys.NEWLINE + fileGlob
    }
  }
  writeFile(rootPath, fileGlob)
}

/**
 * @description git 忽略文件
 * @returns { Promise }
 */
function gitIgnore () {
  return command(`git rm -r --cached ${fileName} -f --ignore-unmatch`)
}

async function main () {
  if (await stat('.git')) {                  // 是否初始化了 git
    return oraPromise(() => 
      Promise.all([fileIgnore(), gitIgnore()]
        .map(t => t.catch(console.log))),{ text: `设置忽略文件` })
  }
  Logger.error('未初始化 git')
}

main()