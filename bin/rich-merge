#!/usr/bin/env node
const { program } = require('commander');
const shell = require('shelljs');
const chalk = require('chalk');
const { hasLocalChanged, isRemoteBranch, command, gitBranchIs } = require('../lib/utils')

program
  .name('rich')
  .usage('merge <branch-name>')
  .on('--help', () => {
    console.log()
    console.log(chalk.gray('    # merge git\'s branch'))
    console.log('    $ rich merge feature-t1')
    console.log()
  })
  .on('exit', console.log)
  .parse(process.argv)

function help () {
 if (program.args.length < 1) return program.help()
}

help()

let branchName = program.args[0];

async function run () {
  const hasChange = await hasLocalChanged()
  if (hasChange) {
    console.log('there are uncommitted codes')
    return;
  }
  try {
    // 默认git merge 采用 fast-forward
    command(`git merge ${branchName} --squash`)
  } catch (err) {
    return
  }
  const isRemote = await isRemoteBranch(branchName)
  gitBranchIs('master').then((isMasterBranch) => {
   // 如果合并的是 master 并且 是远程分支，才会删除
   if (isMasterBranch && isRemote) {
    shell.exec(`git push origin -d ${branchName}`)
   }
 })
}

run()