#!/usr/bin/env node
const { program } = require('commander');
const chalk = require('chalk');
const { isRemoteBranch, command, gitBranchIs } = require('../lib/utils');
const service = require('../lib/service.js')

program
  .name('rich')
  .usage('merge <branch-name>')
  .on('--help', () => {
    console.log('  例如:')
    console.log()
    console.log(chalk.gray('    # 合并分支'))
    console.log('    $ rich merge feature-t1')
    console.log()
  })
  .on('exit', console.log)
  .parse(process.argv)

function help () {
 if (program.args.length < 1) return program.help()
}

help()

let branchName = program.args[0];

async function main () {
  await service.uncommittedCode();
  const [isRemote, currentBranch] = await Promise.all([isRemoteBranch(branchName), gitBranchIs()]);
  try {
    // 默认git merge 采用 fast-forward
    await command(`git merge ${branchName} --squash`)
    await command(`git commit -am "Merge branch '${branchName}' into ${currentBranch}"`)
    await command(`git branch -d ${branchName}`)
    if (isRemote) {
      await command(`git push origin -d ${branchName}`)
    }
  } catch (err) {
    //
  }
}

main()