#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const exists = require('fs').existsSync
const path = require('path')
const ora = require('ora')
const home = require('user-home')
const tildify = require('tildify')
const chalk = require('chalk')
const rm = require('rimraf').sync
const logger = require('../lib/logger')
const generate = require('../lib/generate')
const checkVersion = require('../lib/check-version')
const localPath = require('../lib/local-path')
const { askQuestions } = require('../lib/utils')

const isLocalPath = localPath.isLocalPath
const getTemplatePath = localPath.getTemplatePath

program
  .name('rich')
  .usage('init <template-name> [project-name]')
  .description('初始化项目模板')
  .option('-c, --clone', '使用 git 克隆')
  .option('--offline', '使用本地缓存模板')
  .on('--help', () => {
    console.log('  例如:')
    console.log()
    console.log(chalk.gray('    # 使用模板创建新项目'))
    console.log('    $ rich init mpa my-project')
    console.log()
    console.log(chalk.gray('    # 直接从github模板创建一个新项目'))
    console.log('    $ rich init username/repo my-project')
    console.log()
  })
  .on('exit', console.log)
  .parse(process.argv)

function help () {
  if (program.args.length < 1) return program.help()
}

help()

let template = program.args[0]; // 模板名称
const options = program.opts()
const hasSlash = template.indexOf('/') > -1
const rawName = program.args[1]
const inPlace = !rawName || rawName === '.'
const name = inPlace ? path.relative('../', process.cwd()) : rawName
const to = path.resolve(rawName || '.')
const clone = options.clone || false

const tmp = path.join(home, '.rich-templates', template.replace(/[\/:]/g, '-'))
if (options.offline) {
  console.log(`> 使用缓存模板 ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}

/**
 * 从远程模板库下载一个模板
 * @param {String} template
 */
 function downloadAndGenerate (template) {
  const spinner = ora('下载模板')
  spinner.start()
  // 如果没有指定--offline，则会从远程下载并覆盖本地缓存的模版
  if (exists(tmp)) rm(tmp)
  download(template, tmp, { clone }, err => {
    spinner.stop()
    if (err) logger.fatal('模板' + template + '下载失败: ' + err.message.trim())
    generate(name, tmp, to, err => {
      if (err) logger.fatal(err)
      console.log()
      logger.success('生成 "%s".', name)
    })
  })
}

function main () {
  // 判断模版是否是本地路径
  if (isLocalPath(template)) {
    const templatePath = getTemplatePath(template)
    if (exists(templatePath)) {
      generate(name, templatePath, to, err => {
        if (err) logger.fatal(err)
        console.log()
        logger.success('生成 "%s".', name)
      })
    } else {
      logger.fatal('没找到 "%s" 的本地模板', template)
    }
  } else {
    checkVersion(() => {
      if (!hasSlash) {
        // 使用模板地址
        const officialTemplate = 'nanjingcaiyong/' + template
        downloadAndGenerate(officialTemplate)
      } else {
        downloadAndGenerate(template)
      }
    })
  }
}

if (inPlace || exists(to)) {
  askQuestions([{
    type: 'confirm',
    message: inPlace
      ? '是否在当前目录中生成项目？'
      : '目标目录已存在。是否继续?',
    name: 'ok'
  }]).then(answers => {
    if (answers.ok) {
      main()
    }
  }).catch(logger.fatal)
} else {
  main()
}